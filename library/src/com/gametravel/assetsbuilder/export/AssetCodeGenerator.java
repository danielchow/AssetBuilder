package com.gametravel.assetsbuilder.export;

import com.gametravel.assetsbuilder.Options;
import com.gametravel.assetsbuilder.scan.AssetBundle;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

/**
 * @author Hang Zhou Mar 31, 2014 10:59:41 AM
 */
public class AssetCodeGenerator {

    private FieldWriter fieldWriter;
    private MethodWriter methodWriter;

    public AssetCodeGenerator() {
        fieldWriter = new DefaultFieldWriter();
        methodWriter = new DefaultMethodWriter();
    }

    public String generate(AssetBundle bundle, Options options) {
        StringBuilder builder = new StringBuilder();
        writeDeclaration(builder);
        writePackageAndImports(builder, options);
        writeClassHead(builder, options);
        builder.append(fieldWriter.writeFields(bundle, options));
        builder.append(methodWriter.writeMethods(bundle, options));
        writeClassTail(builder);
        return builder.toString();
    }

    private void writeDeclaration(StringBuilder builder) {
        builder.append("/* AUTO-GENERATED FILE.  DO NOT MODIFY.\n");
        builder.append(" *\n");
        builder.append(" * This class was automatically generated by the\n");
        builder.append(" * AssetBuilder tool from the resource data it found.  It\n");
        builder.append(" * should not be modified by hand.\n");
        builder.append(" */\n");
    }

    private void writePackageAndImports(StringBuilder builder, Options options) {
        builder.append("package ").append(options.Output.PackageName).append(";\n");
        builder.append("\n");
        builder.append("import com.badlogic.gdx.Gdx;\n");
        builder.append("import com.badlogic.gdx.assets.AssetDescriptor;\n");
        builder.append("import com.badlogic.gdx.assets.AssetErrorListener;\n");
        builder.append("import com.badlogic.gdx.assets.AssetManager;\n");
        builder.append("import com.badlogic.gdx.assets.loaders.BitmapFontLoader;\n");
        builder.append("import com.badlogic.gdx.assets.loaders.BitmapFontLoader.BitmapFontParameter;\n");
        builder.append("import com.badlogic.gdx.assets.loaders.MusicLoader;\n");
        builder.append("import com.badlogic.gdx.assets.loaders.ParticleEffectLoader;\n");
        builder.append("import com.badlogic.gdx.assets.loaders.PixmapLoader;\n");
        builder.append("import com.badlogic.gdx.assets.loaders.SkinLoader;\n");
        builder.append("import com.badlogic.gdx.assets.loaders.SoundLoader;\n");
        builder.append("import com.badlogic.gdx.assets.loaders.TextureAtlasLoader;\n");
        builder.append("import com.badlogic.gdx.assets.loaders.TextureLoader;\n");
        builder.append("import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;\n");
        builder.append("import com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver;\n");
        builder.append("import com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver.Resolution;\n");
        builder.append("import com.badlogic.gdx.audio.Music;\n");
        builder.append("import com.badlogic.gdx.audio.Sound;\n");
        builder.append("import com.badlogic.gdx.graphics.Texture;\n");
        builder.append("import com.badlogic.gdx.graphics.Texture.TextureFilter;\n");
        builder.append("import com.badlogic.gdx.graphics.g2d.BitmapFont;\n");
        builder.append("import com.badlogic.gdx.graphics.g2d.ParticleEffect;\n");
        builder.append("import com.badlogic.gdx.graphics.g2d.TextureAtlas;\n");
        builder.append("import com.badlogic.gdx.graphics.g2d.TextureRegion;\n");
        builder.append("import com.badlogic.gdx.graphics.glutils.ShaderProgram;\n");
        builder.append("import com.badlogic.gdx.utils.Array;\n");
        builder.append("import com.badlogic.gdx.utils.Disposable;\n");
        builder.append("import com.esotericsoftware.spine.AnimationStateData;\n");
        builder.append("import com.esotericsoftware.spine.SkeletonData;\n");
        builder.append("import com.esotericsoftware.spine.SkeletonJson;\n");
        builder.append("import com.esotericsoftware.spine.SkeletonBinary;\n");
        builder.append("\n");
    }

    private void writeClassHead(StringBuilder builder, Options options) {
        Date date = new Date(System.currentTimeMillis());
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a", Locale.US);
        builder.append("/**\n");
        builder.append(" * This class helps to load, access and dispose assets. \n");
        builder.append(" * <p><i>Timestamp: ").append(format.format(date)).append("</i></p>\n");
        builder.append(" * <p><i>This class was automatically generated by the AssetBuilder tool from the resource data it found. It should not \n");
        builder.append(" * be modified by hand, otherwise all the changes will be overridden the next time AssetBuilder tool run. If it's \n");
        builder.append(" * necessary to modify the code, consider extending this class.</i></p>\n");
        builder.append(" */\n");
        builder.append("public class ").append(options.Output.ClassName).append(" implements Disposable {\n");
        builder.append("\n");
    }

    private void writeClassTail(StringBuilder builder) {
        builder.append("}");
    }
}
