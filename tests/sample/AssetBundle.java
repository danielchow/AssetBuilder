/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * AssetBuilder tool from the resource data it found.  It
 * should not be modified by hand.
 */
package com.gametravel.assets.gen;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.assets.AssetDescriptor;
import com.badlogic.gdx.assets.AssetErrorListener;
import com.badlogic.gdx.assets.AssetManager;
import com.badlogic.gdx.assets.loaders.BitmapFontLoader;
import com.badlogic.gdx.assets.loaders.BitmapFontLoader.BitmapFontParameter;
import com.badlogic.gdx.assets.loaders.MusicLoader;
import com.badlogic.gdx.assets.loaders.ParticleEffectLoader;
import com.badlogic.gdx.assets.loaders.PixmapLoader;
import com.badlogic.gdx.assets.loaders.SkinLoader;
import com.badlogic.gdx.assets.loaders.SoundLoader;
import com.badlogic.gdx.assets.loaders.TextureAtlasLoader;
import com.badlogic.gdx.assets.loaders.TextureLoader;
import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;
import com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver;
import com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver.Resolution;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.ParticleEffect;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.graphics.glutils.ShaderProgram;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.Disposable;
import com.esotericsoftware.spine.AnimationStateData;
import com.esotericsoftware.spine.SkeletonData;
import com.esotericsoftware.spine.SkeletonJson;
import com.esotericsoftware.spine.SkeletonBinary;

/**
 * This class helps to load, access and dispose assets. 
 * <p><i>Timestamp: 05/16/2014 05:22:14 PM</i></p>
 * <p><i>This class was automatically generated by the AssetBuilder tool from the resource data it found. It should not 
 * be modified by hand, otherwise all the changes will be overridden the next time AssetBuilder tool run. If it's 
 * necessary to modify the code, consider extending this class.</i></p>
 */
public class AssetBundle implements Disposable {

    // TextureAtlas
	public TextureAtlas atlas_packhigh;
	public TextureAtlas atlas_popup;
	public TextureAtlas atlas_menu;
	public TextureAtlas atlas_game;
	public TextureAtlas atlas_load;
	public TextureAtlas atlas_flappygame;
	public TextureAtlas atlas_spineboy;
	public TextureAtlas atlas_speedy;
	public TextureAtlas atlas_powerup;
	public TextureAtlas atlas_goblins;
	public TextureAtlas atlas_dragon;
	public TextureAtlas atlas_goblins_ffd;
	public TextureAtlas atlas_spinosaurus;
	public TextureAtlas atlas_menu_farm;
	public TextureAtlas atlas_skin;

    // Texture
	public Texture texture_badlogic;
	public Texture texture_new1;
	public Texture texture_scoregreen;
	public Texture texture_credits;
	public Texture texture_title;
	public Texture texture_singlesprites1;
	public Texture texture_gradient;

    // Sound
	public Sound sound_gem_1;
	public Sound sound_accel_2;
	public Sound sound_whoosh_1;
	public Sound sound_whoosh_2;
	public Sound sound_game_bgm;
	public Sound sound_accel_1;
	public Sound sound_gem_hit_1;

    // ParticleEffect
	public ParticleEffect particle_backparticle;
	public ParticleEffect particle_elimred;
	public ParticleEffect particle_bigbubble;
	public ParticleEffect particle_elimgreen;
	public ParticleEffect particle_elimyellow;
	public ParticleEffect particle_elimblue;
	public ParticleEffect particle_elimpurple;

    // BitmapFont
	public BitmapFont font_fnt_scene_sel;

    // TextureRegion
    public TextureRegion region_debrislarge;
    public TextureRegion region_factoryheavydamage3;
    public TextureRegion region_factorylightdamage1;
    public TextureRegion region_factoryp1;
    public TextureRegion region_factoryp2;
    public TextureRegion region_factorylightdamage2;
    public TextureRegion region_background;
    public TextureRegion region_toucharea;
    public TextureRegion region_debrismed;
    public TextureRegion region_fish8;
    public TextureRegion region_fish7;
    public TextureRegion region_explosion;
    public TextureRegion region_cpubutton;
    public TextureRegion region_playerbutton;
    public TextureRegion region_fish6;
    public TextureRegion region_music;
    public TextureRegion region_help;
    public TextureRegion region_frigatep4;
    public TextureRegion region_abutton;
    public TextureRegion region_fish5;
    public TextureRegion region_checkboxon;
    public TextureRegion region_checkboxoff;
    public TextureRegion region_fish3;
    public TextureRegion region_bomberp4;
    public TextureRegion region_bomberp3;
    public TextureRegion region_bomberp1;
    public TextureRegion region_bomberp2;
    public TextureRegion region_fish1;
    public TextureRegion region_bigbubble;
    public TextureRegion region_needle;
    public TextureRegion region_laser;
    public TextureRegion region_fish2;
    public TextureRegion region_fish4;
    public TextureRegion region_spark;
    public TextureRegion region_bubble;
    public TextureRegion region_fighterp4;
    public TextureRegion region_fighterp1;
    public TextureRegion region_fighterp2;
    public TextureRegion region_fighterp3;
    public TextureRegion region_bomb;
    public TextureRegion region_missile;
    public TextureRegion region_blackfade;
    public TextureRegion region_factorylightdamage3;
    public TextureRegion region_factoryp3;
    public TextureRegion region_factoryheavydamage2;
    public TextureRegion region_factoryp4;
    public TextureRegion region_factoryheavydamage1;
    public TextureRegion region__;
    public TextureRegion region_debrissmall;
    public TextureRegion region_bomberoutline;
    public TextureRegion region_upgradeoutline;
    public TextureRegion region_production1;
    public TextureRegion region_healthsome;
    public TextureRegion region_fighteroutline;
    public TextureRegion region_production3;
    public TextureRegion region_healthnone;
    public TextureRegion region_production2;
    public TextureRegion region_healthfull;
    public TextureRegion region_productiontile;
    public TextureRegion region_frigateoutline;
    public TextureRegion region_settings;
    public TextureRegion region_back;
    public TextureRegion region_acpubutton;
    public TextureRegion region_aplayerbutton;
    public TextureRegion region_frigatep3;
    public TextureRegion region_frigatep1;
    public TextureRegion region_frigatep2;
    public TextureRegion region_panel;
    public TextureRegion region_cleartext;
    public TextureRegion region_nomovetext;
    public TextureRegion region_levelblockbackgroundpressed;
    public TextureRegion region_levelblockbackground;
    public TextureRegion region_buttonnormal;
    public TextureRegion region_buttonpressed;
    public TextureRegion region_leftarrow;
    public TextureRegion region_rightarrow;
    public TextureRegion region_levelmask;
    public TextureRegion region_texthowtoplay;
    public TextureRegion region_textplay;
    public TextureRegion region_lock;
    public TextureRegion region_textsettings;
    public TextureRegion region_twitter;
    public TextureRegion region_googleplus;
    public TextureRegion region_facebook;
    public Array<TextureAtlas.AtlasRegion> anim_selglow;
    public TextureRegion region_bg;
    public TextureRegion region_board;
    public TextureRegion region_yellow;
    public TextureRegion region_rock;
    public TextureRegion region_red;
    public TextureRegion region_purple;
    public TextureRegion region_green;
    public TextureRegion region_blue;
    public TextureRegion region_ice;
    public TextureRegion region_nextlevel;
    public TextureRegion region_restartwhite;
    public TextureRegion region_share;
    public TextureRegion region_menubuttonpressed;
    public TextureRegion region_menubutton;
    public TextureRegion region_undopressed;
    public TextureRegion region_undo;
    public TextureRegion region_redopressed;
    public TextureRegion region_redo;
    public TextureRegion region_restartpressed;
    public TextureRegion region_restart;
    public TextureRegion region_logo_text;
    public TextureRegion region_logo;
    public TextureRegion region_progress_bar_glow;
    public TextureRegion region_progress_bar_primary;
    public Array<TextureAtlas.AtlasRegion> anim_big;
    public Array<TextureAtlas.AtlasRegion> anim_small;
    public Array<TextureAtlas.AtlasRegion> anim_blue_bird;
    public Array<TextureAtlas.AtlasRegion> anim_red_bird;
    public Array<TextureAtlas.AtlasRegion> anim_yellow_bird;
    public TextureRegion region_bg1;
    public TextureRegion region_bg2;
    public TextureRegion region_black_mask;
    public TextureRegion region_btn_board;
    public TextureRegion region_btn_more;
    public TextureRegion region_btn_play;
    public TextureRegion region_btn_rate;
    public TextureRegion region_btn_rate_large;
    public TextureRegion region_btn_share;
    public TextureRegion region_game_over;
    public TextureRegion region_get_ready;
    public TextureRegion region_green_pipe_down;
    public TextureRegion region_green_pipe_up;
    public TextureRegion region_ground;
    public TextureRegion region_medal_bronze;
    public TextureRegion region_medal_gold;
    public TextureRegion region_medal_platinum;
    public TextureRegion region_medal_silver;
    public TextureRegion region_new_high_score;
    public TextureRegion region_red_pipe_down;
    public TextureRegion region_red_pipe_up;
    public TextureRegion region_result_board;
    public TextureRegion region_tip;
    public TextureRegion region_title;
    public TextureRegion region_white_mask;
    public TextureRegion region_default;
    public TextureRegion region_default_window;
    public TextureRegion region_default_select;
    public TextureRegion region_default_round_large;
    public TextureRegion region_default_scroll;
    public TextureRegion region_default_slider_knob;
    public TextureRegion region_default_round_down;
    public TextureRegion region_default_round;
    public TextureRegion region_check_off;
    public TextureRegion region_textfield;
    public TextureRegion region_check_on;
    public TextureRegion region_tree_minus;
    public TextureRegion region_tree_plus;
    public TextureRegion region_default_slider;
    public TextureRegion region_default_pane;
    public TextureRegion region_default_rect_pad;
    public TextureRegion region_default_splitpane;
    public TextureRegion region_cursor;
    public TextureRegion region_default_splitpane_vertical;
    public TextureRegion region_default_rect_down;
    public TextureRegion region_default_rect;
    public TextureRegion region_default_select_selection;
    public TextureRegion region_default_pane_noborder;
    public TextureRegion region_selection;
    public TextureRegion region_white;

    // ShaderProgram
    public ShaderProgram shader_spotlight_copy;
    public ShaderProgram shader_spotlight;

    // Spine Skeleton Data
    public SkeletonData skelj_goblins_ffd;
    public SkeletonData skelj_powerup;
    public SkeletonData skelj_dragon;
    public SkeletonData skelj_spineboy;
    public SkeletonData skelj_speedy;
    public SkeletonData skelj_goblins;
    public SkeletonData skelj_spinosaurus;
    public SkeletonData skelj_menu_farm;
    public SkeletonData skelb_powerup;
    public SkeletonData skelb_goblins;
    public SkeletonData skelb_speedy;
    public SkeletonData skelb_spineboy;
    public SkeletonData skelb_dragon;
    public SkeletonData skelb_spinosaurus;
    public SkeletonData skelb_goblins_ffd;

    // Spine Animation State Data
    public AnimationStateData anim_statej_goblins_ffd;
    public AnimationStateData anim_statej_powerup;
    public AnimationStateData anim_statej_dragon;
    public AnimationStateData anim_statej_spineboy;
    public AnimationStateData anim_statej_speedy;
    public AnimationStateData anim_statej_goblins;
    public AnimationStateData anim_statej_spinosaurus;
    public AnimationStateData anim_statej_menu_farm;
    public AnimationStateData anim_stateb_powerup;
    public AnimationStateData anim_stateb_goblins;
    public AnimationStateData anim_stateb_speedy;
    public AnimationStateData anim_stateb_spineboy;
    public AnimationStateData anim_stateb_dragon;
    public AnimationStateData anim_stateb_spinosaurus;
    public AnimationStateData anim_stateb_goblins_ffd;

    /** AssetManager instance. */
    protected AssetManager assetManager;

    /** Listener for asset error. */
    protected AssetErrorListener assetErrorListener = new AssetErrorListener() {

        @Override
        public void error(@SuppressWarnings("rawtypes") AssetDescriptor asset, Throwable throwable) {
            Gdx.app.error("Assets", "couldn't load asset '" + asset.fileName + "'",
                   (Exception) throwable);
        }

    };

    /** Singleton */
    protected static AssetBundle instance;

    /**
     * Protected Constructor.
     */
    protected AssetBundle() {
        assetManager = new AssetManager();
        assetManager.setErrorListener(assetErrorListener);
        Texture.setAssetManager(assetManager);
        loadAssets();
    }

    /**
     * Returns singleton instance of {@link AssetBundle}.
     * @return A singleton instance
     */
    public synchronized static AssetBundle getInstance() {
        if (instance == null) {
            instance = new AssetBundle();
        }
        return instance;
    }

    /**
     * Updates the Assets, keeping it loading any assets in the preload queue.
     * @return true if all loading is finished.
     */
    public boolean update() {
        final boolean result = assetManager.update();
        updateFieldRefs();
        return result;
    }

    /**
     * Blocks until all assets are loaded.
     */
    public void finishLoading() {
        assetManager.finishLoading();
        updateFieldRefs();
    }

    /**
     * Initializes asset loading queue of asset manager.
     */
    protected void loadAssets() {
        // TextureAtlas
        assetManager.load("packhigh.atlas", TextureAtlas.class);
        assetManager.load("tests/texture_atlas/popup.atlas", TextureAtlas.class);
        assetManager.load("tests/texture_atlas/menu.atlas", TextureAtlas.class);
        assetManager.load("tests/texture_atlas/game.atlas", TextureAtlas.class);
        assetManager.load("tests/texture_atlas/load.atlas", TextureAtlas.class);
        assetManager.load("tests/texture_atlas/flappygame.atlas", TextureAtlas.class);
        assetManager.load("tests/spine/spineboy.atlas", TextureAtlas.class);
        assetManager.load("tests/spine/speedy.atlas", TextureAtlas.class);
        assetManager.load("tests/spine/powerup.atlas", TextureAtlas.class);
        assetManager.load("tests/spine/goblins.atlas", TextureAtlas.class);
        assetManager.load("tests/spine/dragon.atlas", TextureAtlas.class);
        assetManager.load("tests/spine/goblins-ffd.atlas", TextureAtlas.class);
        assetManager.load("tests/spine/spinosaurus.atlas", TextureAtlas.class);
        assetManager.load("tests/farm/menu_farm.atlas", TextureAtlas.class);
        assetManager.load("skin/skin.atlas", TextureAtlas.class);

        // Texture
        assetManager.load("badlogic.jpg", Texture.class);
        assetManager.load("tests/texture_atlas/new1.png", Texture.class);
        assetManager.load("tests/texture_atlas/scoreGreen.png", Texture.class);
        assetManager.load("credits.png", Texture.class);
        assetManager.load("title.png", Texture.class);
        assetManager.load("singleSprites1.png", Texture.class);
        assetManager.load("data/gradient.png", Texture.class);

        // Sound
        assetManager.load("tests/sound/gem_1.mp3", Sound.class);
        assetManager.load("tests/sound/accel_2.mp3", Sound.class);
        assetManager.load("tests/sound/whoosh_1.mp3", Sound.class);
        assetManager.load("tests/sound/whoosh_2.mp3", Sound.class);
        assetManager.load("tests/sound/game_bgm.mp3", Sound.class);
        assetManager.load("tests/sound/accel_1.mp3", Sound.class);
        assetManager.load("tests/sound/gem_hit_1.mp3", Sound.class);


        // ParticleEffect
        assetManager.load("tests/particle/backParticle.p", ParticleEffect.class);
        assetManager.load("tests/particle/elimRed.p", ParticleEffect.class);
        assetManager.load("tests/particle/bigbubble.p", ParticleEffect.class);
        assetManager.load("tests/particle/elimGreen.p", ParticleEffect.class);
        assetManager.load("tests/particle/elimYellow.p", ParticleEffect.class);
        assetManager.load("tests/particle/elimBlue.p", ParticleEffect.class);
        assetManager.load("tests/particle/elimPurple.p", ParticleEffect.class);

        // BitmapFont
        assetManager.load("tests/bitmap_font/fnt_scene_sel.fnt", BitmapFont.class);

        // ShaderProgram
        loadShaders();
    }

    /**
     * Loads shader assets.
     */
    protected void loadShaders() {
        ShaderProgram.pedantic = false;

        shader_spotlight_copy = new ShaderProgram(Gdx.files.internal("tests/shader/spotlight_copy.vert"), Gdx.files.internal("tests/shader/spotlight_copy.frag"));
        if (!shader_spotlight_copy.isCompiled()) {
            Gdx.app.error("shader_spotlight_copy", "compilation failed:" + shader_spotlight_copy.getLog());
        }
        shader_spotlight = new ShaderProgram(Gdx.files.internal("tests/shader/spotlight.vert"), Gdx.files.internal("tests/shader/spotlight.frag"));
        if (!shader_spotlight.isCompiled()) {
            Gdx.app.error("shader_spotlight", "compilation failed:" + shader_spotlight.getLog());
        }
    }

    @Override
    public void dispose() {
        assetManager.dispose();
        synchronized (AssetBundle.class) {
            instance = null;
        }
    }

    /**
     * Loads all spine skeleton data and animation state data.
     */
    private void loadSpineData() {
        if (skelj_goblins_ffd == null) {
            SkeletonJson skeletonJson = new SkeletonJson(atlas_goblins_ffd);
            skelj_goblins_ffd = skeletonJson.readSkeletonData(Gdx.files.internal("tests/spine/goblins-ffd.spj"));
            anim_statej_goblins_ffd = new AnimationStateData(skelj_goblins_ffd);
        }
        if (skelj_powerup == null) {
            SkeletonJson skeletonJson = new SkeletonJson(atlas_powerup);
            skelj_powerup = skeletonJson.readSkeletonData(Gdx.files.internal("tests/spine/powerup.spj"));
            anim_statej_powerup = new AnimationStateData(skelj_powerup);
        }
        if (skelj_dragon == null) {
            SkeletonJson skeletonJson = new SkeletonJson(atlas_dragon);
            skelj_dragon = skeletonJson.readSkeletonData(Gdx.files.internal("tests/spine/dragon.spj"));
            anim_statej_dragon = new AnimationStateData(skelj_dragon);
        }
        if (skelj_spineboy == null) {
            SkeletonJson skeletonJson = new SkeletonJson(atlas_spineboy);
            skelj_spineboy = skeletonJson.readSkeletonData(Gdx.files.internal("tests/spine/spineboy.spj"));
            anim_statej_spineboy = new AnimationStateData(skelj_spineboy);
        }
        if (skelj_speedy == null) {
            SkeletonJson skeletonJson = new SkeletonJson(atlas_speedy);
            skelj_speedy = skeletonJson.readSkeletonData(Gdx.files.internal("tests/spine/speedy.spj"));
            anim_statej_speedy = new AnimationStateData(skelj_speedy);
        }
        if (skelj_goblins == null) {
            SkeletonJson skeletonJson = new SkeletonJson(atlas_goblins);
            skelj_goblins = skeletonJson.readSkeletonData(Gdx.files.internal("tests/spine/goblins.spj"));
            anim_statej_goblins = new AnimationStateData(skelj_goblins);
        }
        if (skelj_spinosaurus == null) {
            SkeletonJson skeletonJson = new SkeletonJson(atlas_spinosaurus);
            skelj_spinosaurus = skeletonJson.readSkeletonData(Gdx.files.internal("tests/spine/spinosaurus.spj"));
            anim_statej_spinosaurus = new AnimationStateData(skelj_spinosaurus);
        }
        if (skelj_menu_farm == null) {
            SkeletonJson skeletonJson = new SkeletonJson(atlas_menu_farm);
            skelj_menu_farm = skeletonJson.readSkeletonData(Gdx.files.internal("tests/farm/menu_farm.spj"));
            anim_statej_menu_farm = new AnimationStateData(skelj_menu_farm);
        }
        if (skelb_powerup == null) {
            SkeletonBinary skeletonBinary = new SkeletonBinary(atlas_powerup);
            skelb_powerup = skeletonBinary.readSkeletonData(Gdx.files.internal("tests/spine/powerup.skel"));
            anim_stateb_powerup = new AnimationStateData(skelb_powerup);
        }
        if (skelb_goblins == null) {
            SkeletonBinary skeletonBinary = new SkeletonBinary(atlas_goblins);
            skelb_goblins = skeletonBinary.readSkeletonData(Gdx.files.internal("tests/spine/goblins.skel"));
            anim_stateb_goblins = new AnimationStateData(skelb_goblins);
        }
        if (skelb_speedy == null) {
            SkeletonBinary skeletonBinary = new SkeletonBinary(atlas_speedy);
            skelb_speedy = skeletonBinary.readSkeletonData(Gdx.files.internal("tests/spine/speedy.skel"));
            anim_stateb_speedy = new AnimationStateData(skelb_speedy);
        }
        if (skelb_spineboy == null) {
            SkeletonBinary skeletonBinary = new SkeletonBinary(atlas_spineboy);
            skelb_spineboy = skeletonBinary.readSkeletonData(Gdx.files.internal("tests/spine/spineboy.skel"));
            anim_stateb_spineboy = new AnimationStateData(skelb_spineboy);
        }
        if (skelb_dragon == null) {
            SkeletonBinary skeletonBinary = new SkeletonBinary(atlas_dragon);
            skelb_dragon = skeletonBinary.readSkeletonData(Gdx.files.internal("tests/spine/dragon.spb"));
            anim_stateb_dragon = new AnimationStateData(skelb_dragon);
        }
        if (skelb_spinosaurus == null) {
            SkeletonBinary skeletonBinary = new SkeletonBinary(atlas_spinosaurus);
            skelb_spinosaurus = skeletonBinary.readSkeletonData(Gdx.files.internal("tests/spine/spinosaurus.skel"));
            anim_stateb_spinosaurus = new AnimationStateData(skelb_spinosaurus);
        }
        if (skelb_goblins_ffd == null) {
            SkeletonBinary skeletonBinary = new SkeletonBinary(atlas_goblins_ffd);
            skelb_goblins_ffd = skeletonBinary.readSkeletonData(Gdx.files.internal("tests/spine/goblins-ffd.skel"));
            anim_stateb_goblins_ffd = new AnimationStateData(skelb_goblins_ffd);
        }
    }

    /**
     * Updates asset references in {@link AssetBundle}.
     */
    protected void updateFieldRefs() {
        if (atlas_packhigh == null && assetManager.isLoaded("packhigh.atlas")) {
            atlas_packhigh = assetManager.get("packhigh.atlas", TextureAtlas.class);
            region_debrislarge = atlas_packhigh.findRegion("debrislarge");
            region_factoryheavydamage3 = atlas_packhigh.findRegion("factoryheavydamage3");
            region_factorylightdamage1 = atlas_packhigh.findRegion("factorylightdamage1");
            region_factoryp1 = atlas_packhigh.findRegion("factoryp1");
            region_factoryp2 = atlas_packhigh.findRegion("factoryp2");
            region_factorylightdamage2 = atlas_packhigh.findRegion("factorylightdamage2");
            region_background = atlas_packhigh.findRegion("background");
            region_toucharea = atlas_packhigh.findRegion("touchArea");
            region_debrismed = atlas_packhigh.findRegion("debrismed");
            region_fish8 = atlas_packhigh.findRegion("fish8");
            region_fish7 = atlas_packhigh.findRegion("fish7");
            region_explosion = atlas_packhigh.findRegion("explosion");
            region_cpubutton = atlas_packhigh.findRegion("cpubutton");
            region_playerbutton = atlas_packhigh.findRegion("playerbutton");
            region_fish6 = atlas_packhigh.findRegion("fish6");
            region_music = atlas_packhigh.findRegion("music");
            region_help = atlas_packhigh.findRegion("help");
            region_frigatep4 = atlas_packhigh.findRegion("frigatep4");
            region_abutton = atlas_packhigh.findRegion("abutton");
            region_fish5 = atlas_packhigh.findRegion("fish5");
            region_checkboxon = atlas_packhigh.findRegion("checkboxon");
            region_checkboxoff = atlas_packhigh.findRegion("checkboxoff");
            region_fish3 = atlas_packhigh.findRegion("fish3");
            region_bomberp4 = atlas_packhigh.findRegion("bomberp4");
            region_bomberp3 = atlas_packhigh.findRegion("bomberp3");
            region_bomberp1 = atlas_packhigh.findRegion("bomberp1");
            region_bomberp2 = atlas_packhigh.findRegion("bomberp2");
            region_fish1 = atlas_packhigh.findRegion("fish1");
            region_bigbubble = atlas_packhigh.findRegion("bigbubble");
            region_needle = atlas_packhigh.findRegion("needle");
            region_laser = atlas_packhigh.findRegion("laser");
            region_fish2 = atlas_packhigh.findRegion("fish2");
            region_fish4 = atlas_packhigh.findRegion("fish4");
            region_spark = atlas_packhigh.findRegion("spark");
            region_bubble = atlas_packhigh.findRegion("bubble");
            region_fighterp4 = atlas_packhigh.findRegion("fighterp4");
            region_fighterp1 = atlas_packhigh.findRegion("fighterp1");
            region_fighterp2 = atlas_packhigh.findRegion("fighterp2");
            region_fighterp3 = atlas_packhigh.findRegion("fighterp3");
            region_bomb = atlas_packhigh.findRegion("bomb");
            region_missile = atlas_packhigh.findRegion("missile");
            region_blackfade = atlas_packhigh.findRegion("blackfade");
            region_factorylightdamage3 = atlas_packhigh.findRegion("factorylightdamage3");
            region_factoryp3 = atlas_packhigh.findRegion("factoryp3");
            region_factoryheavydamage2 = atlas_packhigh.findRegion("factoryheavydamage2");
            region_factoryp4 = atlas_packhigh.findRegion("factoryp4");
            region_factoryheavydamage1 = atlas_packhigh.findRegion("factoryheavydamage1");
            region__ = atlas_packhigh.findRegion("3");
            region__ = atlas_packhigh.findRegion("4");
            region__ = atlas_packhigh.findRegion("2");
            region__ = atlas_packhigh.findRegion("5");
            region__ = atlas_packhigh.findRegion("1");
            region_debrissmall = atlas_packhigh.findRegion("debrissmall");
            region_bomberoutline = atlas_packhigh.findRegion("bomberoutline");
            region_upgradeoutline = atlas_packhigh.findRegion("upgradeoutline");
            region_production1 = atlas_packhigh.findRegion("production1");
            region_healthsome = atlas_packhigh.findRegion("healthsome");
            region_fighteroutline = atlas_packhigh.findRegion("fighteroutline");
            region_production3 = atlas_packhigh.findRegion("production3");
            region_healthnone = atlas_packhigh.findRegion("healthnone");
            region_production2 = atlas_packhigh.findRegion("production2");
            region_healthfull = atlas_packhigh.findRegion("healthfull");
            region_productiontile = atlas_packhigh.findRegion("productiontile");
            region_frigateoutline = atlas_packhigh.findRegion("frigateoutline");
            region_settings = atlas_packhigh.findRegion("settings");
            region_back = atlas_packhigh.findRegion("back");
            region_acpubutton = atlas_packhigh.findRegion("acpubutton");
            region_aplayerbutton = atlas_packhigh.findRegion("aplayerbutton");
            region_frigatep3 = atlas_packhigh.findRegion("frigatep3");
            region_frigatep1 = atlas_packhigh.findRegion("frigatep1");
            region_frigatep2 = atlas_packhigh.findRegion("frigatep2");
        }
        if (atlas_popup == null && assetManager.isLoaded("tests/texture_atlas/popup.atlas")) {
            atlas_popup = assetManager.get("tests/texture_atlas/popup.atlas", TextureAtlas.class);
            region_panel = atlas_popup.findRegion("panel");
            region_cleartext = atlas_popup.findRegion("clearText");
            region_nomovetext = atlas_popup.findRegion("noMoveText");
        }
        if (atlas_menu == null && assetManager.isLoaded("tests/texture_atlas/menu.atlas")) {
            atlas_menu = assetManager.get("tests/texture_atlas/menu.atlas", TextureAtlas.class);
            region_levelblockbackgroundpressed = atlas_menu.findRegion("levelBlockBackgroundPressed");
            region_levelblockbackground = atlas_menu.findRegion("levelBlockBackground");
            region_buttonnormal = atlas_menu.findRegion("buttonNormal");
            region_buttonpressed = atlas_menu.findRegion("buttonPressed");
            region_leftarrow = atlas_menu.findRegion("leftArrow");
            region_rightarrow = atlas_menu.findRegion("rightArrow");
            region_levelmask = atlas_menu.findRegion("levelMask");
            region_texthowtoplay = atlas_menu.findRegion("textHowToPlay");
            region_textplay = atlas_menu.findRegion("textPlay");
            region_lock = atlas_menu.findRegion("lock");
            region_textsettings = atlas_menu.findRegion("textSettings");
            region_twitter = atlas_menu.findRegion("twitter");
            region_googleplus = atlas_menu.findRegion("googlePlus");
            region_facebook = atlas_menu.findRegion("facebook");
        }
        if (atlas_game == null && assetManager.isLoaded("tests/texture_atlas/game.atlas")) {
            atlas_game = assetManager.get("tests/texture_atlas/game.atlas", TextureAtlas.class);
            anim_selglow = atlas_game.findRegions("selglow");
            region_bg = atlas_game.findRegion("bg");
            region_board = atlas_game.findRegion("board");
            region_yellow = atlas_game.findRegion("yellow");
            region_rock = atlas_game.findRegion("rock");
            region_red = atlas_game.findRegion("red");
            region_purple = atlas_game.findRegion("purple");
            region_green = atlas_game.findRegion("green");
            region_blue = atlas_game.findRegion("blue");
            region_ice = atlas_game.findRegion("ice");
            region_nextlevel = atlas_game.findRegion("nextLevel");
            region_restartwhite = atlas_game.findRegion("restartWhite");
            region_share = atlas_game.findRegion("share");
            region_menubuttonpressed = atlas_game.findRegion("menuButtonPressed");
            region_menubutton = atlas_game.findRegion("menuButton");
            region_undopressed = atlas_game.findRegion("undoPressed");
            region_undo = atlas_game.findRegion("undo");
            region_redopressed = atlas_game.findRegion("redoPressed");
            region_redo = atlas_game.findRegion("redo");
            region_restartpressed = atlas_game.findRegion("restartPressed");
            region_restart = atlas_game.findRegion("restart");
        }
        if (atlas_load == null && assetManager.isLoaded("tests/texture_atlas/load.atlas")) {
            atlas_load = assetManager.get("tests/texture_atlas/load.atlas", TextureAtlas.class);
            region_logo_text = atlas_load.findRegion("logo-text");
            region_logo = atlas_load.findRegion("logo");
            region_progress_bar_glow = atlas_load.findRegion("progress-bar-glow");
            region_progress_bar_primary = atlas_load.findRegion("progress-bar-primary");
        }
        if (atlas_flappygame == null && assetManager.isLoaded("tests/texture_atlas/flappygame.atlas")) {
            atlas_flappygame = assetManager.get("tests/texture_atlas/flappygame.atlas", TextureAtlas.class);
            anim_big = atlas_flappygame.findRegions("big");
            anim_small = atlas_flappygame.findRegions("small");
            anim_blue_bird = atlas_flappygame.findRegions("blue_bird");
            anim_red_bird = atlas_flappygame.findRegions("red_bird");
            anim_yellow_bird = atlas_flappygame.findRegions("yellow_bird");
            region_bg1 = atlas_flappygame.findRegion("bg1");
            region_bg2 = atlas_flappygame.findRegion("bg2");
            region_black_mask = atlas_flappygame.findRegion("black_mask");
            region_btn_board = atlas_flappygame.findRegion("btn_board");
            region_btn_more = atlas_flappygame.findRegion("btn_more");
            region_btn_play = atlas_flappygame.findRegion("btn_play");
            region_btn_rate = atlas_flappygame.findRegion("btn_rate");
            region_btn_rate_large = atlas_flappygame.findRegion("btn_rate_large");
            region_btn_share = atlas_flappygame.findRegion("btn_share");
            region_game_over = atlas_flappygame.findRegion("game_over");
            region_get_ready = atlas_flappygame.findRegion("get_ready");
            region_green_pipe_down = atlas_flappygame.findRegion("green_pipe_down");
            region_green_pipe_up = atlas_flappygame.findRegion("green_pipe_up");
            region_ground = atlas_flappygame.findRegion("ground");
            region_medal_bronze = atlas_flappygame.findRegion("medal_bronze");
            region_medal_gold = atlas_flappygame.findRegion("medal_gold");
            region_medal_platinum = atlas_flappygame.findRegion("medal_platinum");
            region_medal_silver = atlas_flappygame.findRegion("medal_silver");
            region_new_high_score = atlas_flappygame.findRegion("new_high_score");
            region_red_pipe_down = atlas_flappygame.findRegion("red_pipe_down");
            region_red_pipe_up = atlas_flappygame.findRegion("red_pipe_up");
            region_result_board = atlas_flappygame.findRegion("result_board");
            region_tip = atlas_flappygame.findRegion("tip");
            region_title = atlas_flappygame.findRegion("title");
            region_white_mask = atlas_flappygame.findRegion("white_mask");
        }
        if (atlas_spineboy == null && assetManager.isLoaded("tests/spine/spineboy.atlas")) {
            atlas_spineboy = assetManager.get("tests/spine/spineboy.atlas", TextureAtlas.class);
        }
        if (atlas_speedy == null && assetManager.isLoaded("tests/spine/speedy.atlas")) {
            atlas_speedy = assetManager.get("tests/spine/speedy.atlas", TextureAtlas.class);
        }
        if (atlas_powerup == null && assetManager.isLoaded("tests/spine/powerup.atlas")) {
            atlas_powerup = assetManager.get("tests/spine/powerup.atlas", TextureAtlas.class);
        }
        if (atlas_goblins == null && assetManager.isLoaded("tests/spine/goblins.atlas")) {
            atlas_goblins = assetManager.get("tests/spine/goblins.atlas", TextureAtlas.class);
        }
        if (atlas_dragon == null && assetManager.isLoaded("tests/spine/dragon.atlas")) {
            atlas_dragon = assetManager.get("tests/spine/dragon.atlas", TextureAtlas.class);
        }
        if (atlas_goblins_ffd == null && assetManager.isLoaded("tests/spine/goblins-ffd.atlas")) {
            atlas_goblins_ffd = assetManager.get("tests/spine/goblins-ffd.atlas", TextureAtlas.class);
        }
        if (atlas_spinosaurus == null && assetManager.isLoaded("tests/spine/spinosaurus.atlas")) {
            atlas_spinosaurus = assetManager.get("tests/spine/spinosaurus.atlas", TextureAtlas.class);
        }
        if (atlas_menu_farm == null && assetManager.isLoaded("tests/farm/menu_farm.atlas")) {
            atlas_menu_farm = assetManager.get("tests/farm/menu_farm.atlas", TextureAtlas.class);
        }
        if (atlas_skin == null && assetManager.isLoaded("skin/skin.atlas")) {
            atlas_skin = assetManager.get("skin/skin.atlas", TextureAtlas.class);
            region_default = atlas_skin.findRegion("default");
            region_default_window = atlas_skin.findRegion("default-window");
            region_default_select = atlas_skin.findRegion("default-select");
            region_default_round_large = atlas_skin.findRegion("default-round-large");
            region_default_scroll = atlas_skin.findRegion("default-scroll");
            region_default_slider_knob = atlas_skin.findRegion("default-slider-knob");
            region_default_round_down = atlas_skin.findRegion("default-round-down");
            region_default_round = atlas_skin.findRegion("default-round");
            region_check_off = atlas_skin.findRegion("check-off");
            region_textfield = atlas_skin.findRegion("textfield");
            region_check_on = atlas_skin.findRegion("check-on");
            region_tree_minus = atlas_skin.findRegion("tree-minus");
            region_tree_plus = atlas_skin.findRegion("tree-plus");
            region_default_slider = atlas_skin.findRegion("default-slider");
            region_default_pane = atlas_skin.findRegion("default-pane");
            region_default_rect_pad = atlas_skin.findRegion("default-rect-pad");
            region_default_splitpane = atlas_skin.findRegion("default-splitpane");
            region_cursor = atlas_skin.findRegion("cursor");
            region_default_splitpane_vertical = atlas_skin.findRegion("default-splitpane-vertical");
            region_default_rect_down = atlas_skin.findRegion("default-rect-down");
            region_default_rect = atlas_skin.findRegion("default-rect");
            region_default_select_selection = atlas_skin.findRegion("default-select-selection");
            region_default_pane_noborder = atlas_skin.findRegion("default-pane-noborder");
            region_selection = atlas_skin.findRegion("selection");
            region_white = atlas_skin.findRegion("white");
        }
        if (texture_badlogic == null && assetManager.isLoaded("badlogic.jpg")) {
            texture_badlogic = assetManager.get("badlogic.jpg", Texture.class);
        }
        if (sound_gem_1 == null && assetManager.isLoaded("tests/sound/gem_1.mp3")) {
            sound_gem_1 = assetManager.get("tests/sound/gem_1.mp3", Sound.class);
        }
        if (sound_accel_2 == null && assetManager.isLoaded("tests/sound/accel_2.mp3")) {
            sound_accel_2 = assetManager.get("tests/sound/accel_2.mp3", Sound.class);
        }
        if (sound_whoosh_1 == null && assetManager.isLoaded("tests/sound/whoosh_1.mp3")) {
            sound_whoosh_1 = assetManager.get("tests/sound/whoosh_1.mp3", Sound.class);
        }
        if (sound_whoosh_2 == null && assetManager.isLoaded("tests/sound/whoosh_2.mp3")) {
            sound_whoosh_2 = assetManager.get("tests/sound/whoosh_2.mp3", Sound.class);
        }
        if (sound_game_bgm == null && assetManager.isLoaded("tests/sound/game_bgm.mp3")) {
            sound_game_bgm = assetManager.get("tests/sound/game_bgm.mp3", Sound.class);
        }
        if (sound_accel_1 == null && assetManager.isLoaded("tests/sound/accel_1.mp3")) {
            sound_accel_1 = assetManager.get("tests/sound/accel_1.mp3", Sound.class);
        }
        if (sound_gem_hit_1 == null && assetManager.isLoaded("tests/sound/gem_hit_1.mp3")) {
            sound_gem_hit_1 = assetManager.get("tests/sound/gem_hit_1.mp3", Sound.class);
        }
        if (particle_backparticle == null && assetManager.isLoaded("tests/particle/backParticle.p")) {
            particle_backparticle = assetManager.get("tests/particle/backParticle.p", ParticleEffect.class);
        }
        if (particle_elimred == null && assetManager.isLoaded("tests/particle/elimRed.p")) {
            particle_elimred = assetManager.get("tests/particle/elimRed.p", ParticleEffect.class);
        }
        if (particle_bigbubble == null && assetManager.isLoaded("tests/particle/bigbubble.p")) {
            particle_bigbubble = assetManager.get("tests/particle/bigbubble.p", ParticleEffect.class);
        }
        if (particle_elimgreen == null && assetManager.isLoaded("tests/particle/elimGreen.p")) {
            particle_elimgreen = assetManager.get("tests/particle/elimGreen.p", ParticleEffect.class);
        }
        if (particle_elimyellow == null && assetManager.isLoaded("tests/particle/elimYellow.p")) {
            particle_elimyellow = assetManager.get("tests/particle/elimYellow.p", ParticleEffect.class);
        }
        if (particle_elimblue == null && assetManager.isLoaded("tests/particle/elimBlue.p")) {
            particle_elimblue = assetManager.get("tests/particle/elimBlue.p", ParticleEffect.class);
        }
        if (particle_elimpurple == null && assetManager.isLoaded("tests/particle/elimPurple.p")) {
            particle_elimpurple = assetManager.get("tests/particle/elimPurple.p", ParticleEffect.class);
        }
        if (font_fnt_scene_sel == null && assetManager.isLoaded("tests/bitmap_font/fnt_scene_sel.fnt")) {
            font_fnt_scene_sel = assetManager.get("tests/bitmap_font/fnt_scene_sel.fnt", BitmapFont.class);
        }
        loadSpineData();
    }

}
